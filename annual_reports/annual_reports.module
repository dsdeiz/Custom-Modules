<?php

/**
 * Implementation of hook_perm().
 */
function annual_reports_perm() {
  // Doesn't entirely need the usual node-related permissions. Need to allow users to create a message and edit it in order to send it.
  return array('access annual reports', 'administer annual reports', 'create annual report content', 'edit own annual report content');
}

/**
 * Implementation of hook_theme().
 */
function annual_reports_theme() {
  return array(
    'annual_reports_recipient' => array(
      'arguments' => array('node'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function annual_reports_menu() {
  $items = array();

  $items['user/%user/annual-reports'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => t('Annual Reports'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('annual_reports_list_form', 1, 'inbox'),
    'access arguments' => array('access annual reports'),
  );

  $items['user/%user/annual-reports/inbox'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => t('Inbox'),
    'weight' => 1,
  );

  $items['user/%user/annual-reports/draft'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => t('Draft'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('annual_reports_list_form', 1, 'draft'),
    'access arguments' => array('access annual reports'),
    'weight' => 2,
  );

  $items['user/%user/annual-reports/sent'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => t('Sent'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('annual_reports_list_form', 1, 'sent'),
    'access arguments' => array('access annual reports'),
    'weight' => 3,
  );

  return $items;
}

/**
 * Implementation of hook_link().
 */
function annual_reports_link($type, $object, $teaser = FALSE) {
  global $user;
  $links = array();

  if ($type == 'node' && $object->type == 'annual_report' && user_access('access annual reports')) {
    if ($object->uid == $user->uid) {
      if ($object->draft) {
        $links['annual_reports'] = array(
          'title' => t('Go to Annual Reports Draft'),
          'href' => 'user/' . $user->uid . '/annual-reports/draft',
        );
      }
      else {
        $links['annual_reports'] = array(
          'title' => t('Go to Annual Reports Sent'),
          'href' => 'user/' . $user->uid . '/annual-reports/sent',
        );
      }
    }
    elseif ($object->recipient == $user->name) {
      $report_name = substr($object->title, 0, 4) == 'Re: ' ? $object->title : 'Re: ' . $object->title;

      $links['annual_reports_reply'] = array(
        'title' => t('Reply to this message'),
        'href' => 'node/add/annual-report',
        'query' => 'recipient=' . user_load($object->uid)->name . '&report_name=' . $report_name,
      );

      $links['annual_reports'] = array(
        'title' => t('Go to Annual Reports Inbox'),
        'href' => 'user/' . $user->uid . '/annual-reports',
      );
    }
  }

  return $links;
}

/**
 * Implementation of hook_form_alter().
 */
function annual_reports_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'annual_report_node_form') {
    if (isset($_GET['recipient']) || isset($_GET['report_name'])) {
      // Prepopulate specific fields for replying.
      $form['recipient']['#value'] = check_plain($_GET['recipient']);
      $form['title']['#value'] = check_plain($_GET['report_name']);
    }

    // Change button "Save" value
    $form['buttons']['submit']['#value'] = t('Send');
  }
}

/**
 * Node type creation. Doesn't make use of revisions. Content type 
 */

/**
 * Implementation of hook_node_info().
 */
function annual_reports_node_info() {
  return array(
    'annual_report' => array(
      'name' => t('Annual Report'),
      'module' => 'annual_reports',
      'description' => t('This is the content type used in sending and/or receiving annual reports.'),
      'has_title' => TRUE,
      'title_label' => t('Report Name'),
      'has_body' => TRUE,
      'body_label' => t('Message'),
    ),
  );
}

/**
 * Implementation of hook_access().
 */
function annual_reports_access($op, $node, $account) {
  if ($op == 'delete') {
    return user_access('administer annual reports', $account);
  }
  if ($op == 'create') {
    return user_access('create annual report content', $account);
  }
  if ($op == 'update') {
    if (user_access('administer annual reports', $account) || ($account->uid == $node->uid && $node->draft && user_access('edit own annual report content'))) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_form().
 */
function annual_reports_form(&$node, $form_state) {
  // Create an autocomplete textfield for usernames.
  $form['recipient'] = array(
    '#type' => 'textfield',
    '#title' => t('Recipient'),
    '#autocomplete_path' => 'user/autocomplete',
    '#weight' => -99,
    '#required' => TRUE,
    '#default_value' => isset($node->recipient) ? $node->recipient : '',
  );

  // Common stuffs.
  $type = node_get_types('type', $node);

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5
  );

  $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);

  // Provide a checkbox to mark node as draft. Different from marking a node 'unpublished'.
  $form['draft'] = array(
    '#type' => 'checkbox',
    '#title' => t('Save message as draft.'),
    '#default_value' => $node->draft,
    '#description' => t('Checking this box allows you to save your message as <strong>draft</strong> when clicking <strong>Send</strong> thus not sending it.'),
  );

  return $form;
}

/**
 * Implementation of hook_validate
 */
function annual_reports_validate($node, &$form) {
  if (!user_load(array('name' => $node->recipient))) {
    form_set_error('recipient', t('Invalid username.'));
  }
}

/**
 * Implementation of hook_insert().
 */
function annual_reports_insert($node) {
  $recipient = user_load(array('name' => $node->recipient))->uid;
  db_query('INSERT INTO {annual_reports} (nid, status, sender, recipient) VALUES (%d, %d, %d, %d)', $node->nid, $node->draft, $node->uid, $recipient);
}

/**
 * Implementation of hook_update().
 */
function annual_reports_update($node) {
  if (!$node->nid) {
    annual_reports_insert($node);
  }
  else {
    $recipient = user_load(array('name' => $node->recipient))->uid;
    db_query("UPDATE {annual_reports} SET status = %d, sender = %d, recipient = %d WHERE nid = %d", $node->draft, $node->uid, $recipient, $node->nid);
  }
}

/**
 * Implementation of hook_delete().
 */
function annual_reports_delete($node) {
  db_query('DELETE FROM {annual_reports} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function annual_reports_load($node) {
  $result = db_fetch_object(db_query('SELECT status, recipient FROM {annual_reports} WHERE nid = %d', $node->nid));

  $additions = new stdClass();
  $additions->draft = $result->status;
  $additions->recipient = user_load($result->recipient)->name;
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function annual_reports_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  if ($node->draft && !$teaser) {
    drupal_set_message(t('This message is saved as draft. Edit and uncheck <strong>Draft</strong> setting to send message.'), 'warning');
  }

  $node->content['recipient'] = array(
    '#value' => theme('annual_reports_recipient', $node),
    '#weight' => 1,
  );

  return $node;
}

function annual_reports_list_form($form_state, $account, $callback_arg = 'inbox') {
  drupal_add_css(drupal_get_path('module', 'annual_reports') . '/annual_reports.css');

  $header = array(
    array(
      'data' => t('Report Name'),
      'field' => 'n.title',
    ),
  );

  // Provide query and additional headers depending on callback argument.
  switch ($callback_arg) {
    case 'inbox':
      $sql = 'SELECT a.id, n.title, u.name, n.changed FROM {node} n LEFT JOIN {annual_reports} a ON n.nid = a.nid LEFT JOIN {users} u ON a.sender = u.uid WHERE a.recipient = %d AND a.status = 0 AND a.rec_del = 0';
      $header[] = array(
      'data' => t('Sender'),
      'field' => 'u.name',
      );

      $header[] = array(
        'data' => t('Date Received'),
        'field' => 'n.changed',
        'sort' => 'asc',
      );

      $empty = t('No messages received.');

      break;
    case 'draft':
      $sql = 'SELECT a.id, n.title, u.name, n.created FROM {node} n LEFT JOIN {annual_reports} a ON n.nid = a.nid LEFT JOIN {users} u ON a.recipient = u.uid WHERE a.sender = %d AND a.status = 1 AND a.sender_del = 0';
      $header[] = array(
      'data' => t('Recipient'),
      'field' => 'u.name',
      );

      $header[] = array(
        'data' => t('Date Created'),
        'field' => 'n.created',
        'sort' => 'asc',
      );

      $empty = t('No draft messages.');

      break;
    case 'sent':
      $sql = 'SELECT a.id, n.title, u.name, n.changed FROM {node} n LEFT JOIN {annual_reports} a ON n.nid = a.nid LEFT JOIN {users} u ON a.recipient = u.uid WHERE a.sender = %d AND a.status = 0 AND a.sender_del = 0';
      $header[] = array(
      'data' => t('Recipient'),
      'field' => 'u.name',
      );

      $header[] = array(
        'data' => t('Date Sent'),
        'field' => 'n.changed',
        'sort' => 'asc',
      );

      $empty = t('No sent messages.');

      break;
  }

  $result = pager_query($sql . tablesort_sql($header), 20, 0, NULL, $account->uid);

  $rows = array();

  while ($data = db_fetch_object($result)) {
    $row = array(
      l($data->title, 'node/' . $data->nid),
      $data->name,
      isset($data->changed) ? format_date($data->changed, 'custom', 'M j, Y') : format_date($data->created, 'custom', 'M j, Y'),
    );

    $rows[$data->id] = $row;
  }

  $form = array();

  $form['note'] = array(
    '#value' => t('<strong>Note:</strong> Deleting messages below deletes messages immediately. Doesn\'t ask for any confirmation.'),
  );

  $form[$callback_arg] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $rows,
    '#empty' => $empty,
  );

  $form['pager'] = array('#value' => theme('pager', NULL, 10));

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Delete selected'),
  );

  $form['create'] = array(
    '#value' => l(t('Create a new message'), 'node/add/annual-report'),
  );

  return $form;
}

/**
 * Default submit handler for annual_reports_list_form().
 */
function annual_reports_list_form_submit($form, &$form_state) {
  if (isset($form_state['values']['inbox'])) {
    $inbox = array_filter($form_state['values']['inbox']);
    foreach ($inbox as $k => $v) {
      $data = new stdClass;
      $data->id = $v;
      $data->rec_del = 1;
      drupal_write_record('annual_reports', $data, 'id');
    }
  }

  if (isset($form_state['values']['draft']) || isset($form_state['values']['sent'])) {
    $list = isset($form_state['values']['draft']) ? $form_state['values']['draft'] : $form_state['values']['sent'];
    $list = array_filter($list);
    foreach ($list as $k => $v) {
      $data = new stdClass;
      $data->id = $v;
      $data->sender_del = 1;
      drupal_write_record('annual_reports', $data, 'id');
    }
  }
}

/**
 * Theme callback for viewing the node with additional info.
 */
function theme_annual_reports_recipient($node) {
  $output = '<div class="annual-reports-recipient">';
  $output .= t('This message is sent to %recipient.', array('%recipient' => check_plain($node->recipient)));
  $output .= '</div>';
  return $output;
}
